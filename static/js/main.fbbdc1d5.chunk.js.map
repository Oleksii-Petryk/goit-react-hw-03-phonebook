{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/ContactList/ContactList.module.css","components/Filter/Filter.module.css","components/Title/Title.module.css","components/Title/Title.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactList/ContactList.js","App.js","index.js"],"names":["module","exports","Title","title","className","styles","ContactForm","state","name","number","handleChange","e","currentTarget","value","setState","handleSubmit","preventDefault","props","onSubmit","reset","this","form","label","input","type","pattern","required","onChange","autoComplete","button","Component","Filter","ContactList","contacts","deleteContact","list","map","id","contactItem","text","onClick","App","filter","changeFilter","formSubmitHandler","contact","uuidv4","find","toLocaleLowerCase","alert","prevState","getFilteredContactList","includes","localStorage","getItem","parsedContacts","JSON","parse","prevProps","setItem","stringify","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fbbdc1d5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__3MLX7\",\"label\":\"ContactForm_label__iQV-A\",\"input\":\"ContactForm_input__32RQH\",\"button\":\"ContactForm_button__1yuQJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__azw3f\",\"contactItem\":\"ContactList_contactItem__3u6dL\",\"text\":\"ContactList_text__XVQoO\",\"number\":\"ContactList_number__3VJLa\",\"button\":\"ContactList_button__tbEwy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__uGyDp\",\"input\":\"Filter_input__1ITA8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Title_title__dEhVW\"};","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styles from \"./Title.module.css\";\n\nfunction Title({ title }) {\n  return <h1 className={styles.title}>{title}</h1>;\n}\n\nexport default Title;\n\nTitle.propTypes = {\n  title: PropTypes.string,\n};\n","import { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport styles from \"./ContactForm.module.css\";\n\nclass ContactForm extends Component {\n  state = { name: \"\", number: \"\" };\n\n  handleChange = (e) => {\n    const { name, value } = e.currentTarget;\n    this.setState({ [name]: value });\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.props.onSubmit(this.state);\n    this.reset();\n  };\n\n  reset = () => {\n    this.setState({ name: \"\", number: \"\" });\n  };\n\n  render() {\n    const { name, number } = this.state;\n\n    return (\n      <form className={styles.form} onSubmit={this.handleSubmit}>\n        <label className={styles.label}>\n          Name\n          <input\n            className={styles.input}\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            value={name}\n            onChange={this.handleChange}\n            autoComplete=\"off\"\n          />\n        </label>\n        <label className={styles.label}>\n          Number\n          <input\n            className={styles.input}\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n            value={number}\n            onChange={this.handleChange}\n            autoComplete=\"off\"\n          />\n        </label>\n        <button type=\"submit\" className={styles.button}>\n          Add contact\n        </button>\n      </form>\n    );\n  }\n}\n\nexport default ContactForm;\n\nContactForm.propTypes = {\n  name: PropTypes.string,\n  number: PropTypes.number,\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styles from \"./Filter.module.css\";\n\nfunction Filter({ value, onChange }) {\n  return (\n    <label className={styles.label}>\n      Find contacts by name\n      <input\n        className={styles.input}\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n        required\n        value={value}\n        onChange={onChange}\n        autoComplete=\"off\"\n      />\n    </label>\n  );\n}\n\nexport default Filter;\n\nFilter.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styles from \"./ContactList.module.css\";\n\nfunction ContactList({ contacts, deleteContact }) {\n  return (\n    <ul className={styles.list}>\n      {contacts.map(({ id, name, number }) => {\n        return (\n          <li className={styles.contactItem} key={id}>\n            <p className={styles.text}>{name}</p>\n            <p className={styles.number}>{number}</p>\n            <button\n              className={styles.button}\n              type=\"button\"\n              onClick={() => deleteContact(id)}\n            >\n              Delete\n            </button>\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n\nexport default ContactList;\n\nContactList.propTypes = {\n  id: PropTypes.string,\n  name: PropTypes.string,\n  number: PropTypes.number,\n};\n","import \"./App.css\";\nimport { Component } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport Title from \"./components/Title\";\nimport ContactForm from \"./components/ContactForm\";\nimport Filter from \"./components/Filter\";\nimport ContactList from \"./components/ContactList\";\n\nclass App extends Component {\n  state = {\n    contacts: [],\n    filter: \"\",\n  };\n\n  changeFilter = (e) => {\n    this.setState({ filter: e.currentTarget.value });\n  };\n\n  formSubmitHandler = ({ name, number }) => {\n    const contact = {\n      id: uuidv4(),\n      name,\n      number,\n    };\n\n    if (\n      this.state.contacts.find(\n        (contact) =>\n          contact.name.toLocaleLowerCase() === name.toLocaleLowerCase()\n      )\n    ) {\n      alert(name + \" is already in contacts\");\n      return;\n    }\n\n    this.setState((prevState) => ({\n      contacts: [...prevState.contacts, contact],\n    }));\n  };\n\n  getFilteredContactList = () => {\n    const { contacts, filter } = this.state;\n    return contacts.filter((contact) =>\n      contact.name.toLocaleLowerCase().includes(filter.toLocaleLowerCase())\n    );\n  };\n\n  deleteContact = (id) => {\n    this.setState(({ contacts }) => ({\n      contacts: contacts.filter((contact) => contact.id !== id),\n    }));\n  };\n\n  componentDidMount() {\n    const contacts = localStorage.getItem(\"contacts\");\n    const parsedContacts = JSON.parse(contacts);\n    if (parsedContacts) {\n      this.setState({ contacts: parsedContacts });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.contacts !== prevState.contacts) {\n      localStorage.setItem(\"contacts\", JSON.stringify(this.state.contacts));\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Title title=\"Phonebook\" />\n\n        <ContactForm onSubmit={this.formSubmitHandler} />\n\n        <Title title=\"Contacts\" />\n\n        <Filter value={this.state.filter} onChange={this.changeFilter} />\n\n        <ContactList\n          contacts={this.getFilteredContactList()}\n          deleteContact={this.deleteContact}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}